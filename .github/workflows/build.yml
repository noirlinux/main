name: NOIR CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run-chroot-script:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Get the release tarball url
        id: get-tarball-url
        run: |
          LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/noirlinux/main/releases/latest | jq -r '.assets[] | select(.name | endswith(".tar.xz")) | .browser_download_url')
          echo "Latest release URL: $LATEST_RELEASE_URL"
          echo "::set-output name=url::$LATEST_RELEASE_URL"

      - name: Download the tarball
        run: |
          curl -L -o chroot.tar.xz ${{ steps.get-tarball-url.outputs.url }}

      - name: Extract the tarball
        run: |
          sudo mkdir -p /chroot/
          sudo tar xf chroot.tar.xz -C /chroot/
          echo "NOIR chroot extracted to /chroot/"

      - name: Copy host resolv.conf to chroot
        run: |
          sudo cp /etc/resolv.conf /chroot/etc/resolv.conf

      - name: Clone NOIR repos to chroot
        run: |
          sudo mkdir -p /chroot/root/
          sudo mkdir -p /chroot/root/build
          sudo git clone https://github.com/noirlinux/main /chroot/root/main

      - name: Enter Chroot and Run Script
        run: |
          sudo chroot /chroot /bin/sh -c "\
            export LOGNAME=$(whoami); \
            export CFLAGS='-march=x86-64 -mtune=generic -pipe -O2'; \
            export CXXFLAGS='-march=x86-64 -mtune=generic -pipe -O2'; \
            export MAKEFLAGS='-j$(nproc)'; \
            export KISS_ROOT=/root/build; \
            export KISS_PATH=/root/main/core:/root/main/extra; \
            cd /var/db/kiss/installed && \
            kiss build $(ls | grep -v 'gcc')"

      - name: Check Exit Status
        id: check_status
        run: |
          if [ $? -eq 0 ]; then
            echo "::set-output name=status::success"
          else
            echo "::set-output name=status::failure"
          fi

      - name: Outcome
        if: steps.check_status.outputs.status == 'failure'
        run: |
          echo "Script failed"
          exit 1
